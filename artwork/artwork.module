<?php

/*
 * @file
 * this module creates an artwork entity
 */

/**
 * implements hook_menu 
 */
function artwork_menu() {
  $items = array();
  $items['admin/structure/artworks'] = array(
    'title' => 'Manage Artworks',
    'description' => 'Manage Artworks',
    'page callback' => 'artwork_overview_types',
    'access arguments' => array('administer artworks'),
  );
  $items['admin/structure/artworks/manage/%artworks'] = array(
    'title' => 'Manage artworks',
    'title callback' => 'artwork_type_page_title',
    'title arguments' => array(4),
    'page callback' => 'artwork_information',
    'page arguments' => array(4),
    'access arguments' => array('administer artworks'),
  );
  $items['admin/structure/artworks/manage/%artwork_type/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['artwork_add'] = array(
    'title' => 'Add new artwork',
    'page callback' => 'artwork_add_page',
    'access arguments' => array('create artworks'),
    'weight' => 1,
    'menu_name' => 'management',
    'file' => 'artwork.pages.inc',
  );
  foreach (artwork_types as $type) {
    $type_url_str = str_replace('_', '-', $type->type);
    $items['artwork/add/' . $type_url_str] = array(
      'title' => $type->name,
      'title callback' => 'check_plain',
      'page callback' => 'artwork_add',
      'page arguments' => array(2),
      'access arguments' => array('create artwork'),
      'description' => $type->description,
      'file' => 'artwork.pages.inc',
    );
  }

  return $items;
}

/**
 * callback for  admin/structure/artworks hook_menu definition returns themed list of artwork types
 */
function artwork_overview_types() {
  $items = array();
  foreach (artwork_types() as $type => $info) {
    $type_url_str = str_replace('_', '-', $type);
    $label = t('View @type', array('@type' => $info->name));
    $items[] = l($label, 'admin/structure/artworks/manage/' .
        $type_url_str);
  }
  return theme('item_list', array('items' => $items));
}

/**
 *
 * @param type $type - an artwork type array object
 * @return string to Manage an artwork type 
 */
function artwork_type_page_title($type) {
  return t('Manage @type', array('@type' => $type->name));
}

/**
 *
 * @param type $artwork_type
 * @return string to artworks type name and title
 */
function artwork_information($artwork_type) {
  return $artwork_type->name . ': ' . $artwork_type->description;
}

/**
 * Implements hook_entity_info 
 */
function artwork_entity_info() {
  $return = array();
  $return['artwork'] = array(
    'label' => t('artwork'),
    'controller class' => 'ArtworkController',
    'base table' => 'artwork',
    'revision table' => 'artwork_revision',
    'uri callback' => 'artwork_uri',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'aid',
      'revision' => 'vid',
      'bundle' => 'type',
      'label' => 'title',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'static cache' => TRUE,
    'bundles' => array(),
    'view modes' => array(
      'full' => array(
        'label' => t('Full Content'),
        'custom setting' => FALSE,
      ),
      'teaser' => array(
        'label' => t('Teaser'),
        'custom settings' => FALSE,
      ),
    ),
  );

  foreach (artwork_types() as $type => $info) {
    $return['artwork']['bundels'][$type] = array(
      'label' => $info->name,
      'admin' => array(
        'path' => 'admin/structure/artworks/%artwork_work',
        'real path' => 'admin/structure/artworks/manage/' . str_replace('_', '-', $type),
        'bundle argument' => 4,
        'access arguments' => array('administer artworks'),
      ),
    );
  }

  return $return;
}

/**
 * @function artowrk_uri preps output for link  functions  l() or url() 
 * @param type $artwork 
 */
function artwork_uri($artwork) {
  return array(
    'path' => 'artwork/' . $artwork->aid,
  );
}

/**
 * @function artwork_types returns php object arrays a la nodes of defined artwork entity types 
 */
function artwork_types() {
  $types = &drupal_static(__FUNCTION__);
  if (empty($types)) {
    $type['painting'] = (object) array(
          'type' => 'painting',
          'name' => t('Painting'),
          'description' => t('A picture made with paint'),
    );
    $type['sculpture'] = (object) array(
          'type' => 'sculpture',
          'name' => t('Sculpture'),
          'description' => t('A carving made of stone or wood'),
    );
  }
  return $types;
}

/**
 * @function method for loading and artwork entity
 * @param type $aid  and artwork id 
 * @param type $vid -  artwork version id
 * @param type $reset - TRUE or FALSE
 * @return type an artwork  entity
 */
function artwork_load($aid = NULL, $vid = NULL, $reset = FALSE) {
  $aids = (isset($aid) ? array($aid) : $array());
  $conditions = (isset($vid) ? array('vid' => $vid) : array());
  $artwork = artwork_load_multiple($aids, $conditions, $reset);
  return $artwork ? reset($artwork) : FALSE;
}

/**
 * @function method for loading multiple artwork entities
 * @param type $aids  and array of artwork ids
 * @param type $conditions - array of artwork version ids
 * @param type $reset 
 * @return type  an array of artwork  entities
 */
function artwork_load_multiple($aids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('artwork', $aids, $conditions, $reset);
}

/**
 * Implements hook_forms  (plurarl intentional)
 * @return string 
 */
function artwork_forms() {
  $forms = array();
  if ($types = artwork_types()) {
    foreach (array_keys($types) as $type) {
      $forms[$type . '_artwork_form']['callback'] = 'artwork_form';
    }
  }
  return $forms;
}

/**
 *  Implements hoook_form
 * @param type $form  - form array
 * @param array $form_state -  form state array
 * @param type $artwork - artwork entity
 * @return string 
 */
function artwork_form($form, &$form_state, $artwork) {
  // Set the id to identify this as an artwork edit form.
  $form['#id'] = 'artwork-form';
  // Save the artwork for later, in case we need it.
  $form['#artwork'] = $artwork;
  $form_state['artwork'] = $artwork;
  // Common fields. We don't have many.
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#default_value' => $artwork->title,
    '#weight' => -5,
    '#required' => TRUE,
  );
  $form['revision'] = array(
    '#access' => user_access('administer artworks'),
    '#type' => 'checkbox',
    '#title' => t('Create new revision'),
    '#default_value' => 0,
  );
  // Add the buttons.
  $form['buttons'] = array();
  $form['buttons']['#weight'] = 100;
  $form['buttons']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 5,
    '#submit' => array('artwork_form_submit'),
  );
  if (!empty($artwork->aid)) {
    $form['buttons']['delete'] = array(
      '#access' => user_access('delete artworks'),
      '#type' => 'submit',
      '#value' => t('Delete'),
      '#weight' => 15,
      '#submit' => array('artwork_form_delete_submit'),
    );
  }
  $form['#validate'][] = 'artwork_form_validate';
  field_attach_form('artwork', $artwork, $form, $form_state);
  return $form;
}

function artwork_form_validate($form, &$form_state) {
  $artwork = $form_state['artwork'];
  // Field validation.
  field_attach_form_validate('artwork', $artwork, $form, $form_state);
}

function artwork_form_submit($form, &$form_state) {
  global $user;
  $artwork = &$form_state['artwork'];
  // Set the artwork's uid if it's being created at this time.
  if (empty($artwork->uid)) {
    $artwork->uid = $user->uid;
  }
  $artwork->title = $form_state['values']['title'];
  $artwork->revision = $form_state['values']['revision'];
  // Notify field widgets.
  field_attach_submit('artwork', $artwork, $form, $form_state);
  // Save the artwork.
  artwork_save($artwork);
  // Notify the user.
  drupal_set_message(t('Artwork saved.'));
  $form_state['redirect'] = 'artwork/' . $artwork->aid;
}

function artwork_save($artwork) {
     return entity_get_controller('artwork')->save($artwork);
}