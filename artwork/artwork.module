<?php

/*
 * @file
 * this module creates an artwork entity
 */

/**
 * implements hook_menu 
 */
function artwork_menu() {
  $items = array();
  $items['admin/structure/artworks'] = array(
    'title' => 'Manage Artworks',
    'description' => 'Manage Artworks',
    'page callback' => 'artwork_overview_types',
    'access arguments' => array('administer artworks'),
  );
  $items['admin/structure/artworks/manage/%artworks'] = array(
    'title' => 'Manage artworks',
    'title callback' => 'artwork_type_page_title',
    'title arguments' => array(4),
    'page callback' => 'artwork_information',
    'page arguments' => array(4),
    'access arguments' => array('administer artworks'),
  );
  $items['admin/structure/artworks/manage/%artwork_type/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['artwork_add'] = array(
    'title' => 'Add new artwork',
    'page callback' => 'artwork_add_page',
    'access arguments' => array('create artworks'),
    'weight' => 1,
    'menu_name' => 'management',
    'file' => 'artwork.pages.inc',
  );
  foreach (artwork_types as $type) {
    $type_url_str = str_replace('_', '-', $type->type);
    $items['artwork/add/' . $type_url_str] = array(
      'title' => $type->name,
      'title callback' => 'check_plain',
      'page callback' => 'artwork_add',
      'page arguments' => array(2),
      'access arguments' => array('create artwork'),
      'description' => $type->description,
    );
  }

  return $items;
}

/**
 * callback for  admin/structure/artworks hook_menu definition returns themed list of artwork types
 */
function artwork_overview_types() {
  $items = array();
  foreach (artwork_types() as $type => $info) {
    $type_url_str = str_replace('_', '-', $type);
    $label = t('View @type', array('@type' => $info->name));
    $items[] = l($label, 'admin/structure/artworks/manage/' .
        $type_url_str);
  }
  return theme('item_list', array('items' => $items));
}

/**
 *
 * @param type $type - an artwork type array object
 * @return string to Manage an artwork type 
 */
function artwork_type_page_title($type) {
  return t('Manage @type', array('@type' => $type->name));
}

/**
 *
 * @param type $artwork_type
 * @return string to artworks type name and title
 */
function artwork_information($artwork_type) {
  return $artwork_type->name . ': ' . $artwork_type->description;
}

/**
 * Implements hook_entity_info 
 */
function artwork_entity_info() {
  $return = array();
  $return['artwork'] = array(
    'label' => t('artwork'),
    'controller class' => 'ArtworkController',
    'base table' => 'artwork',
    'revision table' => 'artwork_revision',
    'uri callback' => 'artwork_uri',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'aid',
      'revision' => 'vid',
      'bundle' => 'type',
      'label' => 'title',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'static cache' => TRUE,
    'bundles' => array(),
    'view modes' => array(
      'full' => array(
        'label' => t('Full Content'),
        'custom setting' => FALSE,
      ),
      'teaser' => array(
        'label' => t('Teaser'),
        'custom settings' => FALSE,
      ),
    ),
  );

  foreach (artwork_types() as $type => $info) {
    $return['artwork']['bundels'][$type] = array(
      'label' => $info->name,
      'admin' => array(
        'path' => 'admin/structure/artworks/%artwork_work',
        'real path' => 'admin/structure/artworks/manage/' . str_replace('_', '-', $type),
        'bundle argument' => 4,
        'access arguments' => array('administer artworks'),
      ),
    );
  }

  return $return;
}

/**
 * @function artowrk_uri preps output for link  functions  l() or url() 
 * @param type $artwork 
 */
function artwork_uri($artwork) {
  return array(
    'path' => 'artwork/' . $artwork->aid,
  );
}

/**
 * @function artwork_types returns php object arrays a la nodes of defined artwork entity types 
 */
function artwork_types() {
  $types = &drupal_static(__FUNCTION__);
  if (empty($types)) {
    $type['painting'] = (object) array(
          'type' => 'painting',
          'name' => t('Painting'),
          'description' => t('A picture made with paint'),
    );
    $type['sculpture'] = (object) array(
          'type' => 'sculpture',
          'name' => t('Sculpture'),
          'description' => t('A carving made of stone or wood'),
    );
  }
  return $types;
}

/**
 * @function load an artworks entity
 * @param type $aid - the aid from the database table artwork - primary key
 * @param type $vid - the vid from the database table artwork_revisions - primary key
 * @param type $reset - boolean
 */
function artwork_load($aid = NULL, $vid = NULL, $reset = FALSE) {
  $aids = array();
  $conditions = array();
  $aids = (isset($aid) ? array($aid) : array());
  $conditions = (isset($vid) ? array($vid) : array());
  $artwork = artwork_load_multiple($aid, $vid, $reset);
  return $artwork ? reset($artwork) : FALSE;
}

/**
 * @function load multiple artwork entities
 * @param type $aids - an array of $aids
 * @param type $condtions - an array of $vids
 * @param type $reset - boolean
 * @return type 
 */
function artwork_load_multiple($aids, $condtions, $reset) {
  $types = artwork_types();
  $type = str_replace('-', '_', $type);
  return isset($types[$type]) ? $types[$type] : FALSE;
}
